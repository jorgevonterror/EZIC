/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IF_Asesor;

import Clases.Estudiante;
import Clases.PDF.MostrarPDF;
import Conexiones.ConexionCinthia;
import Conexiones.ConexionEduardo;
import Formularios.FRM_Login;
import java.awt.HeadlessException;
import java.io.File;
import java.io.OutputStream;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/**
 *
 * @author eduardogarcia
 */
public final class IF_EvaluacionEstudiante extends javax.swing.JInternalFrame {

    /**
     * Creates new form IF_EvaluacionEstudiante
     */
    String NC = "";

    Estudiante mEstudiante;
    ConexionCinthia mCC = new ConexionCinthia();
    ConexionEduardo mCE = new ConexionEduardo();
    DefaultTableModel TablaConsultaEst = new DefaultTableModel();
    String ID_ConsultaEst = "";
    String ID_CambioEst = "";
    int ID_Estudiante = 0, ID_ExpedienteUltimo = 0;
    MostrarPDF mMPDF = new MostrarPDF();
    FRM_Login mFL = new FRM_Login();
    int idExp = 0;
    int SumaPuntaje = 0;

    DefaultTableModel ModeloTabla = new DefaultTableModel();
    String[] DatosN;
    String[] Preguntas = {
        "1. Asiste puntualmente a realizar sus actividades.",
        "2. Trabaja en equipo y se adapta a nuevas situaciones.",
        "3. Cumple correctamente con las actividades encomendadas en el tiempo estipulado, alcanzando los objetivos.",
        "4. Organiza su tiempo y trabaja sin necesidad de una supervisión estrecha.",
        "5. Interpreta la realidad y se sensibiliza con respecto a la problemática que se pretende disminuir o eliminar con el Servicio Social.",
        "6. Realiza sugerencias personales para beneficio o mejora del programa en el que participo.",
        "7. Tiene iniciativa para ayudar en las actividades encomendadas.",
        "8. Muestra espíritu de servicio.",
        "9. Entrega en tiempo y forma los reportes o informes solicitados.",
        "10. Mostró responsabilidad y compromiso con su Servicio Social.",
        "11. Realizó un trabajo innovador en su área de desempeño.",
        "12. Es dedicado y proactivo en los trabajos encomendados."
    };
    String[] Valor = {
        "5", "10", "10", "10", "5", "5", "10", "10", "5", "15", "5", "10"
    };
    String[] Evaluacion = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"};
    JComboBox jcb;

    public IF_EvaluacionEstudiante() {
        initComponents();
        LlenarComboCarrera();
        ModeloTabla.addColumn("Criterio");
        ModeloTabla.addColumn("Valor");
        ModeloTabla.addColumn("Evaluación");

        TablaConsultaEst.addColumn("Nombre");
        TablaConsultaEst.addColumn("Carrera");
        TablaConsultaEst.addColumn("Número de Control");

        jcb = new JComboBox(Evaluacion);
        jcb.setSelectedItem(0);
        TableColumn tc = TBEvaluacion.getColumnModel().getColumn(2);
        TableCellEditor tce = new DefaultCellEditor(jcb);
        tc.setCellEditor(tce);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        TBEvaluacion = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TBAlumnos = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        CBCarreraCons = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBorder(null);

        TBEvaluacion.setModel(ModeloTabla);
        TBEvaluacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBEvaluacionTBPuntajes1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TBEvaluacion);

        jButton2.setText("Guardar Evaluación");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("EVALUACIÓN");

        TBAlumnos.setModel(TablaConsultaEst);
        TBAlumnos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TBAlumnosTBPuntajes1MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TBAlumnos);

        jLabel18.setText("Carrera:");

        CBCarreraCons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBCarreraConsActionPerformed(evt);
            }
        });

        jButton7.setText("Buscar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton3.setText("Ver Todos");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(250, 250, 250))
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CBCarreraCons, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(jButton2)))
                .addContainerGap(106, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(CBCarreraCons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(104, 104, 104))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TBEvaluacionTBPuntajes1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBEvaluacionTBPuntajes1MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_TBEvaluacionTBPuntajes1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ValidarCriterios();
        GuardarEvaluacion();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TBAlumnosTBPuntajes1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TBAlumnosTBPuntajes1MouseClicked
        // TODO add your handling code here:
        int Seleccion = TBAlumnos.rowAtPoint(evt.getPoint());
        String TempC = String.valueOf(TBAlumnos.getValueAt(Seleccion, 2));
        ID_ConsultaEst = TempC;
        NC = TempC;
        AsignarPreguntasATabla();
    }//GEN-LAST:event_TBAlumnosTBPuntajes1MouseClicked

    private void CBCarreraConsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBCarreraConsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBCarreraConsActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        BuscarAlumnosEspecificos();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        BuscarTodosAlumnos();
    }//GEN-LAST:event_jButton3ActionPerformed

    public void AsignarPreguntasATabla() {
        LimpiarTablaEvaluacion();
        for (int i = 0; i < 12; i++) {
            DatosN = new String[2];
            DatosN[0] = Preguntas[i];
            DatosN[1] = Valor[i];
            ModeloTabla.addRow(DatosN);
        }

    }

    public void ValidarCriterios() {

        for (int i = 0; i < TBEvaluacion.getRowCount(); i++) {

            try {
                if ((Integer.parseInt((String) TBEvaluacion.getValueAt(i, 1))) < (Integer.parseInt((String) TBEvaluacion.getValueAt(i, 2)))) {
                    JOptionPane.showMessageDialog(null, "Selecciona un criterio menor o igual al valor en la pregunta " + (i + 1) + "");
                } else {
                    //JOptionPane.showMessageDialog(null, "Bien");
                }
            } catch (HeadlessException | NumberFormatException e) {
                //JOptionPane.showMessageDialog(null, "Selecciona un criterio válido");
            }
        }

    }

    public void BuscarAlumnosEspecificos() {
        TablaConsultaEst = (DefaultTableModel) TBAlumnos.getModel();
        int a = TablaConsultaEst.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            TablaConsultaEst.removeRow(TablaConsultaEst.getRowCount() - 1);
        }
        if (mCE.conectar()) {
            ArrayList mArrayListAlumnos = new ArrayList();
            //int IDAsesor = mCE.ConsultaIDAsesor(mFL.Pass);
            mArrayListAlumnos = mCE.ConsultarAlumnosParaAsesor(Integer.parseInt(mFL.Pass), CBCarreraCons.getSelectedItem().toString());
            String[] Datos = null;
            if (mArrayListAlumnos != null) {

                for (int i = 0; i < mArrayListAlumnos.size(); i++) {
                    mEstudiante = (Estudiante) mArrayListAlumnos.get(i);
                    Datos = new String[3];
                    //ID_Asesor = mAsesor.getID_Asesor();
                    Datos[0] = mEstudiante.getNombre();
                    Datos[1] = mEstudiante.getCarrera();
                    Datos[2] = mEstudiante.getNC();
                    //Datos[2] = 
                    TablaConsultaEst.addRow(Datos);
                }

            } else {
                //LBL_Mensajero2.setText("No hay puntajes");
            }

        } else {
            //LBL_Mensajero2.setText("Error al consultar");
        }

        mCE.desconectar();
    }

    public void BuscarTodosAlumnos() {
        TablaConsultaEst = (DefaultTableModel) TBAlumnos.getModel();
        int a = TablaConsultaEst.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            TablaConsultaEst.removeRow(TablaConsultaEst.getRowCount() - 1);
        }
        if (mCE.conectar()) {
            ArrayList mArrayListAlumnos = new ArrayList();
            mArrayListAlumnos = mCE.ConsultarTodosAlumnosParaAsesor(Integer.parseInt(mFL.Pass));
            String[] Datos = null;
            if (mArrayListAlumnos != null) {

                for (int i = 0; i < mArrayListAlumnos.size(); i++) {
                    mEstudiante = (Estudiante) mArrayListAlumnos.get(i);
                    Datos = new String[3];
                    //ID_Asesor = mAsesor.getID_Asesor();
                    Datos[0] = mEstudiante.getNombre();
                    Datos[1] = mEstudiante.getCarrera();
                    Datos[2] = mEstudiante.getNC();
                    TablaConsultaEst.addRow(Datos);
                }

            } else {
                //LBL_Mensajero2.setText("No hay puntajes");
            }

        } else {
            //LBL_Mensajero2.setText("Error al consultar");
        }

        mCE.desconectar();
    }

    public void LlenarComboCarrera() {
        CBCarreraCons.removeAllItems();
        CBCarreraCons.addItem("Ninguno");

        if (mCE.conectar()) {
            ArrayList mArrayList = new ArrayList();
            mArrayList = mCE.ConsultaCarreraEstudiantesAsignadosAsesor(Integer.parseInt(mFL.Pass));
            if (mArrayList != null) {

                for (int i = 0; i < mArrayList.size(); i++) {
                    CBCarreraCons.addItem(mArrayList.get(i).toString());
                }

            } else {
                JOptionPane.showMessageDialog(null, "No tiene Carreras Dadas de Alta");
            }
            mCE.desconectar();
        } else {
            JOptionPane.showMessageDialog(null, "No conectado a la BD");
        }
    }

    public void LimpiarTablaEvaluacion() {
        ModeloTabla = (DefaultTableModel) TBEvaluacion.getModel();
        int a = ModeloTabla.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            ModeloTabla.removeRow(ModeloTabla.getRowCount() - 1);
        }
    }

    public void GuardarEvaluacion() {
        try {
            SumaPuntaje = 0;
            int NTemp = 0;
            for (int i = 0; i < TBEvaluacion.getRowCount(); i++) {
                NTemp = Integer.parseInt(String.valueOf(TBEvaluacion.getModel().getValueAt(i, 2)));
                SumaPuntaje = SumaPuntaje + NTemp;
            }
            //

        } catch (NumberFormatException e) {

        }
        mCE.conectar();
        idExp = mCE.ConsultarIDExpediente("Expediente_" + NC);
        if (mCE.AltaEvaluacion(SumaPuntaje, idExp) == true) {
            //JOptionPane.showMessageDialog(null, "Evaluación guardada.");
            LimpiarTablaEvaluacion();
        } else {
            JOptionPane.showMessageDialog(null, "Evaluación NO guardada.");
        }
        mCE.desconectar();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBCarreraCons;
    private javax.swing.JTable TBAlumnos;
    private javax.swing.JTable TBEvaluacion;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables
}
